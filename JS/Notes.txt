// ðŸ”´ MUTATING (changes original)
arr.push(4)        // Adds to end
arr.pop()          // Removes from end
arr.shift()        // Removes from start
arr.unshift(0)     // Adds to start
arr.reverse()      // Reverses in-place
arr.sort()         // Sorts in-place
arr.splice(1, 2)   // Removes/adds elements

// ðŸŸ¢ NON-MUTATING (returns new array)
arr.slice(1, 3)    // Returns portion
arr.concat([4, 5]) // Returns combined
arr.map(x => x*2)  // Returns transformed
arr.filter(x => x>2) // Returns filtered
arr.reduce((a,b) => a+b) // Returns single value

"Primitive values can't be changed, Objects can"

Strings, Numbers, Booleans = Immutable
Arrays, Objects = Mutable


=======================================================
const str = "Hello World";

// Extracting
str.slice(0, 5)       // "Hello"            str still "Hello World"
str.substring(0, 5)   // "Hello"            str still "Hello World"
str.substr(0, 5)      // "Hello"            (deprecated)

// Transforming
str.toUpperCase()     // "HELLO WORLD"      str still "Hello World"
str.toLowerCase()     // "hello world"      str still "Hello World"
str.trim()            // removes whitespace  str unchanged
str.replace('o', '0') // "Hell0 World"      str still "Hello World"
str.replaceAll('o','0') // "Hell0 W0rld"    str still "Hello World"

// Searching
str.indexOf('World')  // 6                  str still "Hello World"
str.includes('Hello') // true               str still "Hello World"
str.startsWith('He')  // true               str still "Hello World"
str.endsWith('ld')    // true               str still "Hello World"

// Converting
str.split(' ')        // ["Hello", "World"]  str still "Hello World"
str.charAt(0)         // "H"                str still "Hello World"
str.charCodeAt(0)     // 72                 str still "Hello World"
=====================For Label=======================
// mainLoop: for (let i = 0; i < products.length; i++) {
//   console.log(products[i]);
//   nestedLoop: for (let j = 0; j < colors.length; j++) {
//     console.log(`- ${colors[j]}`);
//     if (colors[j] === "Green") {
//       break mainLoop;
//     }
//   }
// }


=====================Arrow Function==================================
// let sayHello7 = (name1, name2) => `Hello ${name1}, Hello ${name2}`;
// console.log(sayHello7("Ahmed", "Mo"));
=======================================================
// WITHOUT let - Creates GLOBAL variable
function badExample() {
    myVar = 10;  // No let = Global variable! 
}
badExample();
console.log(myVar);  // Output: 10 (Accessible globally!) ðŸ˜±

// WITH let - Creates LOCAL variable
function goodExample() {
    let myVar = 20;  // With let = Local to function
}
goodExample();
console.log(myVar);  // Error: myVar is not defined âœ…
=======================Map================================
let myarr = [1, 2, 3, 4, 5, 6];

function add(num) {
  return num + num;
}
let newArr = myarr.map(add)

console.log(newArr);

let func = (ele) => ele + ele;


console.log(myarr.map(func))

console.log(myarr.map(function(ele){return ele + ele;}))

console.log(myarr.map(fun = (ele) => ele + ele))
=======================================================
.split => converts string to array.
.join => joins the array into one string
isNaN();
parseInt();

=======================================================
const numbers = [1, 2, 3, 4, 5];

// forEach - DO something with each element (no return)
numbers.forEach(num => console.log(num));
// Prints: 1, 2, 3, 4, 5
// Returns: undefined

// map - TRANSFORM each element (returns new array)
const doubled = numbers.map(num => num * 2);
// Returns: [2, 4, 6, 8, 10]

// filter - KEEP some elements (returns new array)
const evens = numbers.filter(num => num % 2 === 0);
// Returns: [2, 4]

// reduce - COMBINE into one value (returns single value)
const sum = numbers.reduce((acc, num) => acc + num, 0);
// Returns: 15
==========how to skip an iteration in the big 4==============
  //A Higher-Order Function is a function that:

  //Takes another function as an argument, OR
  Returns a function

  const numbers = [1, 2, 3, 4, 5];

  // forEach - use return to skip
  numbers.forEach(num => {
      if (num === 3) return; // Skip this iteration
      console.log(num);
  });
  // Output: 1, 2, 4, 5

  // map - return a placeholder or filter later
  const doubled = numbers.map(num => {
      if (num === 3) return null; // Skip by returning null
      return num * 2;
  }).filter(Boolean); // Remove null values
  console.log(doubled); // [2, 4, 8, 10]

  // filter - just return false to skip
  const filtered = numbers.filter(num => {
      if (num === 3) return false; // Skip this element
      return true;
  });
  console.log(filtered); // [1, 2, 4, 5]
  review functions (specially the big fat arrow)
========object creation=========
  // 1. OBJECT LITERAL - Direct creation
  const person1 = {
      name: "John",
      age: 30,
      greet() { return `Hi, I'm ${this.name}`; }
  };

  // 2. NEW OBJECT() - Empty then add properties
  const person2 = new Object();
  person2.name = "John";
  person2.age = 30;
  person2.greet = function() { return `Hi, I'm ${this.name}`; };

  // 3. OBJECT.CREATE() - Set prototype chain
  const personPrototype = {
      greet() { return `Hi, I'm ${this.name}`; }
  };
  const person3 = Object.create(personPrototype);
  person3.name = "John";
  person3.age = 30;
  // person3.greet() inherited from prototype

  // 4. OBJECT.ASSIGN() - Copy/merge objects
  const person4 = Object.assign({}, 
      { name: "John" },
      { age: 30 },
      { greet() { return `Hi, I'm ${this.name}`; } }
  );
  // Spread operator (easier!)
  const person5 = { ...{ name: "John" }, ...{ age: 30 } };

  // Quick Test - All create similar objects
  console.log(person1);  // { name: "John", age: 30, greet: f }
  console.log(person2);  // { name: "John", age: 30, greet: f }
  console.log(person3);  // { name: "John", age: 30 } (greet in prototype)
  console.log(person4);  // { name: "John", age: 30, greet: f }

  // When to use which?
  // {} literal        â†’ 99% of the time (simplest)
  // new Object()      â†’ Almost never (verbose)
  // Object.create()   â†’ When you need prototype inheritance
  // Object.assign()   â†’ When copying/merging objects
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================